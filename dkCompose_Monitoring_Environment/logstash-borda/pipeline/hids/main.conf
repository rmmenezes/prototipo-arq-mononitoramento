input {
    # REST API port 5001
     beats {
		port => 5001
        type => json
        ssl_verify_mode => "none"
        ssl_certificate => "/usr/share/logstash/certs/BeatsLogstash.crt.pem"
        ssl_key => "/usr/share/logstash/certs/BeatsLogstash.key.pem"
        ssl => true
	}
}

filter {
     # Drop Elasticsearch Bulk API control lines
    if ([message] =~ '\{"index"') {
        drop {}
    }

	json{
		source => "message"
	 	target => "alert"
	}
    
    # Remove pacotes com headers gerados pela comunicação tcp com o logstash
    if ![alert]{
        drop {}
    }


    if [alert][data][srcip] { 
        mutate {add_field => {"[alert][data][ip_ip_src]" => "%{[alert][data][srcip]}"}}
        mutate {remove_field => ["[alert][data][srcip]"]}
    }

    if [alert][data][dstip] { 
        mutate {add_field => {"[alert][data][ip_ip_dst]" => "%{[alert][data][dstip]}"}}
        mutate {remove_field => ["[alert][data][dstip]"]}
    }

    if ![alert][data][ip_ip_dst]{
        if [alert][agent_name][ip]{ mutate {add_field => {"[alert][data][ip_ip_dst]" => "%{[alert][agent_name][ip]}"}}}
        if [alert][agent][ip]{ mutate {add_field => {"[alert][data][ip_ip_dst]" => "%{[alert][agent][ip]}"}}}
    }


    # Adiciona cordenadas geográficas (IP)
	if [alert][data][ip_ip_src] or [alert][data][ip_ip_dst] {

        # GeoIP para endereços de Origem
        geoip {
            source => "[alert][data][ip_ip_src]"
            target => "[geo_location][source]"
        }

        # GeoIP para endereços de Destino
        geoip {
            source => "[alert][data][ip_ip_dst]"
            target => "[geo_location][dest]"
        }
        

        # Caso não encontrado localização para o IP Source, verificar em um dicionario pre-definido
        if ![geo_location][source][location] {
            translate {
                exact => true
                regex => true
                override => true
                field => "[alert][data][ip_ip_src]"
                destination => "geo_point_source"
                dictionary_path => "/usr/share/logstash/pipeline/database/databaseGeoIPLocal.yml"
                fallback => '{"timezone":"America/New_York","continent_code":"NA","country_name":"United States","country_code2":"US","country_code3":"US","region_name":"New York","latitude":28.046,"longitude":-82.6848,"location":{"lat":28.046,"lon":-82.6848}}'
                refresh_behaviour => "replace"
            }
            json {
                source => "geo_point_source"
                target => "[geo_location][source]"
                add_field => { "[geo_location][source][ip_ip_src]" => "%{[alert][data][ip_ip_src]}" }
                remove_field => [ "geo_point_source" ]
            }
            mutate {
                remove_tag => [ "_geoip_lookup_failure" ]
            }
        }

        # Caso não encontrado localização para o IP Destino, verificar em um dicionario pre-definido
        if ![geo_location][dest][location] {
            translate {
                exact => true
                regex => true
                override => true
                field => "[alert][data][ip_ip_dst]"
                destination => "geo_point_dest"
                dictionary_path => "/usr/share/logstash/pipeline/database/databaseGeoIPLocal.yml"
                fallback => '{"timezone":"America/New_York","continent_code":"NA","country_name":"United States","country_code2":"US","country_code3":"US","region_name":"New York","latitude":28.046,"longitude":-82.6848,"location":{"lat":28.046,"lon":-82.6848}}'
                refresh_behaviour => "replace"
            }
            json {
                source => "geo_point_dest"
                target => "[geo_location][dest]"
                add_field => { "[geo_location][dest][ip_ip_dst]" => "%{[alert][data][ip_ip_dst]}" }
                remove_field => [ "geo_point_dest" ]
            }
            mutate {
                remove_tag => [ "_geoip_lookup_failure" ]
            }
        }

        if [geo_location][source][ip] { mutate {rename => ["[geo_location][source][ip]", "[geo_location][source][ip_ip_src]"]}}
        if [geo_location][dest][ip] { mutate {rename => ["[geo_location][dest][ip]", "[geo_location][dest][ip_ip_dst]"]}}
    }

 
    mutate {
		remove_field => ["port","type","@version","message","host","path","tags"]
	} 
}

output {
    # Direciona o fluxo de dados para o pipelineMongoDB responsavel pelo armazenamento crú dos arquivos
    pipeline { send_to => hidsMongoDB }
    
    # Direciona o fluxo de dados para o pipelineElasticSearch responsavel pela filtragem/tratamento e indexação
    pipeline { send_to => hidsElasticsearch }
}