input {
    # REST API port 5000
    beats {
		port => 5000
        type => json
        ssl_verify_mode => "none"
        ssl_certificate => "/usr/share/logstash/certs/BeatsLogstash.crt.pem"
        ssl_key => "/usr/share/logstash/certs/BeatsLogstash.key.pem"
        ssl => true
	}
}


filter{
    # Drop Elasticsearch Bulk API control lines
    if ([message] =~ '\{"index"') {
        drop {}
    }

	json{
		source => "message"
	 	target => "packet"
	}
    
    # Remove pacotes com headers gerados pela comunicação tcp com o logstash
    if ![packet]{
        drop {}
    }

    # Adiciona cordenadas geográficas (IP)
	if [packet][layers][ip] or [packet][layers][ipv6] {

        # IPV4
        if [packet][layers][ip] {
            # GeoIP para endereços de Origem
            geoip {
                source => "[packet][layers][ip][ip_ip_src]"
                target => "[geo_location][source]"
            }

            # GeoIP para endereços de Destino
            geoip {
                source => "[packet][layers][ip][ip_ip_dst]"
                target => "[geo_location][dest]"
            }
            

            # Caso não encontrado localização para o IP Source, verificar em um dicionario pre-definido
            if ![geo_location][source][location] {
                translate {
                    exact => true
                    regex => true
                    override => true
                    field => "[packet][layers][ip][ip_ip_src]"
                    destination => "geo_point_source"
                    dictionary_path => "/usr/share/logstash/pipeline/database/databaseGeoIPLocal.yml"
                    fallback => '{"timezone":"America/New_York","continent_code":"NA","country_name":"United States","country_code2":"US","country_code3":"US","region_name":"New York","latitude":28.046,"longitude":-82.6848,"location":{"lat":28.046,"lon":-82.6848}}'
                    refresh_behaviour => "replace"
                }
                json {
                    source => "geo_point_source"
                    target => "[geo_location][source]"
                    add_field => { "[geo_location][source][ip_ip_src]" => "%{[packet][layers][ip][ip_ip_src]}" }
                    remove_field => [ "geo_point_source" ]
                }
                mutate {
                    remove_tag => [ "_geoip_lookup_failure" ]
                }
            }

            # Caso não encontrado localização para o IP Destino, verificar em um dicionario pre-definido
            if ![geo_location][dest][location] {
                translate {
                    exact => true
                    regex => true
                    override => true
                    field => "[packet][layers][ip][ip_ip_dst]"
                    destination => "geo_point_dest"
                    dictionary_path => "/usr/share/logstash/pipeline/database/databaseGeoIPLocal.yml"
                    fallback => '{"timezone":"America/New_York","continent_code":"NA","country_name":"United States","country_code2":"US","country_code3":"US","region_name":"New York","latitude":28.046,"longitude":-82.6848,"location":{"lat":28.046,"lon":-82.6848}}'
                    refresh_behaviour => "replace"
                }
                json {
                    source => "geo_point_dest"
                    target => "[geo_location][dest]"
                    add_field => { "[geo_location][dest][ip_ip_dst]" => "%{[packet][layers][ip][ip_ip_dst]}" }
                    remove_field => [ "geo_point_dest" ]
                }
                mutate {
                    remove_tag => [ "_geoip_lookup_failure" ]
                }
            }

            if [geo_location][source][ip] { mutate {rename => ["[geo_location][source][ip]", "[geo_location][source][ip_ip_src]"]}}
            if [geo_location][dest][ip] { mutate {rename => ["[geo_location][dest][ip]", "[geo_location][source][ip_ip_dst]"]}}
        }


        # IPV6
        if [packet][layers][ipv6] {
            # GeoIP para endereços de Origem
            geoip {
                source => "[packet][layers][ipv6][ipv6_ipv6_src]"
                target => "[geo_location][source]"
            }

            # GeoIP para endereços de Destino
            geoip {
                source => "[packet][layers][ipv6][ipv6_ipv6_dst]"
                target => "[geo_location][dest]"
            }

            # Caso não encontrado localização para o IP Source, verificar em um dicionario pre-definido
            if ![geo_location][source][location] {
                translate {
                    exact => true
                    regex => true
                    override => true
                    field => "[packet][layers][ipv6][ipv6_ipv6_src]"
                    destination => "geo_point_source"
                    dictionary_path => "/usr/share/logstash/pipeline/database/databaseGeoIPLocal.yml"
                    fallback => '{"timezone":"America/New_York","continent_code":"NA","country_name":"United States","country_code2":"US","country_code3":"US","region_name":"New York","latitude":28.046,"longitude":-82.6848,"location":{"lat":28.046,"lon":-82.6848}}'
                    refresh_behaviour => "replace"
                }
                json {
                    source => "geo_point_source"
                    target => "[geo_location][source]"
                    add_field => { "[geo_location][source][ip]" => "%{[packet][layers][ipv6][ipv6_ipv6_src]}" }
                    remove_field => [ "geo_point_source" ]
                }
                mutate {
                    remove_tag => [ "_geoip_lookup_failure" ]
                }
            }

            # Caso não encontrado localização para o IP Destino, verificar em um dicionario pre-definido
            if ![geo_location][dest][location] {
                translate {
                    exact => true
                    regex => true
                    override => true
                    field => "[packet][layers][ipv6][ipv6_ipv6_dst]"
                    destination => "geo_point_dest"
                    dictionary_path => "/usr/share/logstash/pipeline/database/databaseGeoIPLocal.yml"
                    fallback => '{"timezone":"America/New_York","continent_code":"NA","country_name":"United States","country_code2":"US","country_code3":"US","region_name":"New York","latitude":28.046,"longitude":-82.6848,"location":{"lat":28.046,"lon":-82.6848}}'
                    refresh_behaviour => "replace"
                }
                json {
                    source => "geo_point_dest"
                    target => "[geo_location][dest]"
                    add_field => { "[geo_location][dest][ip]" => "%{[packet][layers][ipv6][ipv6_ipv6_dst]}" }
                    remove_field => [ "geo_point_dest" ]
                }
                mutate {
                    remove_tag => [ "_geoip_lookup_failure" ]
                }
            }

            if [geo_location][source][ip] { mutate {rename => ["[geo_location][source][ip]", "[geo_location][source][ipv6_ipv6_src]" ]}}
            if [geo_location][dest][ip] { mutate {rename => ["[geo_location][dest][ip]", "[geo_location][dest][ipv6_ipv6_dst]" ]}}
        }

        # Traduz os valores numericos de protocolos (IPV4).
        if [packet][layers][ip] {
            translate {
                exact => true
                field => "[packet][layers][ip][ip_ip_proto]"
                destination => "packet_protocol"
                dictionary_path => "/usr/share/logstash/pipeline/database/databaseProtocolList.json"
                fallback => '{"Keyword": "", "Protocol": "Unassigned"}'
                refresh_behaviour => "replace"
            }
            mutate { add_field => { "[packet_protocol][Protocol_number]" => "%{[packet][layers][ip][ip_ip_proto]}" }}
        }

        # Traduz os valores numericos de protocolos (IPV6).
        if [packet][layers][ipv6] {
            translate {
                exact => true
                field => "[packet][layers][ipv6][ipv6_ipv6_nxt]"
                destination => "packet_protocol"
                dictionary_path => "/usr/share/logstash/pipeline/database/databaseProtocolList.json"
                fallback => '{"Keyword": "", "Protocol": "Unassigned"}'
                refresh_behaviour => "replace"

            }
            mutate { add_field => { "[packet_protocol][Protocol_number]" => "%{[packet][layers][ipv6][ipv6_ipv6_nxt]}" }}
        }

        # Traduz os valores numericos das portas de serviço (IPV4).
        if [packet][layers][tcp][tcp_tcp_dstport] {
            translate {
                exact => true
                field => "[packet][layers][tcp][tcp_tcp_dstport]"
                destination => "[services_ports][dstport_infos]"
                fallback => '{"service_name":"","transport_protocol":"tcp","description_service":""}'
                dictionary_path => "/usr/share/logstash/pipeline/database/databaseServicesPortsTCP.json"
                refresh_behaviour => "replace"

            }
            # Failed lookup - ensure JSON is stored
            if [services_ports][dstport_infos] == '{"service_name":"","transport_protocol":"tcp","description_service":""}' {
                json { 
                    source => "[services_ports][dstport_infos]" 
                    target => "[services_ports][dstport_infos]"
                }
            }
            mutate { add_field => { "[services_ports][dstport_infos][tcp_tcp_dstport]" => "%{[packet][layers][tcp][tcp_tcp_dstport]}" }}
            mutate { add_field => { "[services_ports][dstport_infos][service_name_2]" => "%{[services_ports][dstport_infos][tcp_tcp_dstport]} %{[services_ports][dstport_infos][service_name]}" } }
            mutate { remove_field => ["[services_ports][dstport_infos][service_name]"]}
            mutate { rename => ["[services_ports][dstport_infos][service_name_2]", "[services_ports][dstport_infos][service_name]" ]}
        }

         # Traduz os valores numericos das portas de serviço (IPV4).
        if [packet][layers][tcp][tcp_tcp_srcport] {
            translate {
                exact => true
                field => "[packet][layers][tcp][tcp_tcp_srcport]"
                destination => "[services_ports][srcport_infos]"
                fallback => '{"service_name":"","transport_protocol":"tcp","description_service":""}'
                dictionary_path => "/usr/share/logstash/pipeline/database/databaseServicesPortsTCP.json"
                refresh_behaviour => "replace"

            }
            # Failed lookup - ensure JSON is stored
            if [services_ports][srcport_infos] == '{"service_name":"","transport_protocol":"","description_service":""}' {
                json { 
                    source => "[services_ports][srcport_infos]" 
                    target => "[services_ports][srcport_infos]"
                }
            }
            mutate { add_field => { "[services_ports][srcport_infos][tcp_tcp_srcport]" => "%{[packet][layers][tcp][tcp_tcp_srcport]}" }}
            mutate { add_field => { "[services_ports][srcport_infos][service_name_2]" => "%{[services_ports][srcport_infos][tcp_tcp_srcport]} %{[services_ports][srcport_infos][service_name]}" } }
            mutate { remove_field => ["[services_ports][srcport_infos][service_name]"]}
            mutate { rename => ["[services_ports][srcport_infos][service_name_2]", "[services_ports][srcport_infos][service_name]" ]}
        }

         # Traduz os valores numericos das portas de serviço (IPV4). --- UDP ---
        if [packet][layers][udp][udp_udp_dstport] {
            translate {
                exact => true
                field => "[packet][layers][udp][udp_udp_dstport]"
                destination => "[services_ports][dstport_infos]"
                fallback => '{"service_name":"","transport_protocol":"udp","description_service":""}'
                dictionary_path => "/usr/share/logstash/pipeline/database/databaseServicesPortsUDP.json"
                refresh_behaviour => "replace"

            }
            # Failed lookup - ensure JSON is stored
            if [services_ports][dstport_infos] == '{"service_name":"","transport_protocol":"udp","description_service":""}' {
                json { 
                    source => "[services_ports][dstport_infos]" 
                    target => "[services_ports][dstport_infos]"
                }
            }
            mutate { add_field => { "[services_ports][dstport_infos][udp_udp_dstport]" => "%{[packet][layers][udp][udp_udp_dstport]}" }}
            mutate { add_field => { "[services_ports][dstport_infos][service_name_2]" => "%{[services_ports][dstport_infos][udp_udp_dstport]} %{[services_ports][dstport_infos][service_name]}" } }
            mutate { remove_field => ["[services_ports][dstport_infos][service_name]"]}
            mutate { rename => ["[services_ports][dstport_infos][service_name_2]", "[services_ports][dstport_infos][service_name]" ]}
        }

         # Traduz os valores numericos das portas de serviço (IPV4).
        if [packet][layers][udp][udp_udp_srcport] {
            translate {
                exact => true
                field => "[packet][layers][udp][udp_udp_srcport]"
                destination => "[services_ports][srcport_infos]"
                fallback => '{"service_name":"","transport_protocol":"udp","description_service":""}'
                dictionary_path => "/usr/share/logstash/pipeline/database/databaseServicesPortsUDP.json"
                refresh_behaviour => "replace"

            }
            # Failed lookup - ensure JSON is stored
            if [services_ports][srcport_infos] == '{"service_name":"","transport_protocol":"udp","description_service":""}' {
                json { 
                    source => "[services_ports][srcport_infos]" 
                    target => "[services_ports][srcport_infos]"
                }
            }
            mutate { add_field => { "[services_ports][srcport_infos][udp_udp_srcport]" => "%{[packet][layers][udp][udp_udp_srcport]}" }}
            mutate { add_field => { "[services_ports][srcport_infos][service_name_2]" => "%{[services_ports][srcport_infos][udp_udp_srcport]} %{[services_ports][srcport_infos][service_name]}" } }
            mutate { remove_field => ["[services_ports][srcport_infos][service_name]"]}
            mutate { rename => ["[services_ports][srcport_infos][service_name_2]", "[services_ports][srcport_infos][service_name]" ]}
        }
    }

    if [packet][layers][modbus]{
        # Traduz os valores numericos das portas de serviço (IPV4).
        if [packet][layers][modbus][modbus_modbus_func_code] {
            translate {
                exact => true
                field => "[packet][layers][modbus][modbus_modbus_func_code]"
                destination => "[packet][layers][modbus][modbus_modbus_func_name]"
                fallback => '{"function_name":""}'
                dictionary_path => "/usr/share/logstash/pipeline/database/databaseModBusFuncCodes.json"
                refresh_behaviour => "replace"

            }
        }
    }

    # Timestap Convert
    if [packet]{
      date {
            match => [ "[packet][timestamp]","UNIX_MS" ]
            target => "@timestamp"
      }
    }
    
    mutate {
		remove_field => ["port","log","ecs","input","type","@version","message","host","path","tags", "@version"]
	} 

}

output {
    # Direciona o fluxo de dados para o pipelineMongoDB responsavel pelo armazenamento crú dos arquivos
    pipeline { send_to => networkMongoDB }
    
    # Direciona o fluxo de dados para o pipelineElasticSearch responsavel pela filtragem/tratamento e indexação
    pipeline { send_to => networkElasticsearch }
}