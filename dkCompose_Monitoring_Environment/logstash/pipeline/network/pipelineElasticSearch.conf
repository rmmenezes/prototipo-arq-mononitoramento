input {
    # EndereÃ§o de entrada
    pipeline { address => networkElasticsearch } 
}

filter {
      
      # Frame Layer
	if [packet][layers][frame]{
            mutate {add_field => {"frame_frame_time" => "%{[packet][layers][frame][frame_frame_time]}"}}
            mutate {remove_field => ["[packet][layers][frame]"]}
      }
      # Ethernet Layer
	if [packet][layers][eth]{
            mutate {add_field => {"eth_eth_dst" => "%{[packet][layers][eth][eth_eth_dst]}"}}
            mutate {add_field => {"eth_eth_src" => "%{[packet][layers][eth][eth_eth_src]}"}}
            mutate {add_field => {"eth_dst_eth_dst_resolved" => "%{[packet][layers][eth][eth_dst_eth_dst_resolved]}"}}
            mutate {add_field => {"eth_src_eth_addr_resolved" => "%{[packet][layers][eth][eth_src_eth_addr_resolved]}"}}
            mutate {remove_field => ["[packet][layers][eth]"]}
      }
      # Ip Layer
	if [packet][layers][ip]{
            mutate {add_field => {"ip_ip_src" => "%{[packet][layers][ip][ip_ip_src]}"}}
            mutate {add_field => {"ip_ip_dst" => "%{[packet][layers][ip][ip_ip_dst]}"}}
            mutate {add_field => {"ip_ip_proto" => "%{[packet][layers][ip][ip_ip_proto]}"}}
            mutate {add_field => {"ip_ip_ttl" => "%{[packet][layers][ip][ip_ip_ttl]}"}}
            mutate {remove_field => ["[packet][layers][ip]"]}
      }
      # TCP Layer
	if [packet][layers][tcp]{
            mutate {add_field => {"tcp_tcp_srcport" => "%{[packet][layers][tcp][tcp_tcp_srcport]}"}}
            mutate {add_field => {"tcp_tcp_dstport" => "%{[packet][layers][tcp][tcp_tcp_dstport]}"}}
            mutate {remove_field => ["[packet][layers][tcp]"]}
      }
      # UDP Layer
	if [packet][layers][udp]{
            mutate {add_field => {"udp_udp_dstport" => "%{[packet][layers][udp][udp_udp_dstport]}"}}
            mutate {add_field => {"udp_udp_srcport" => "%{[packet][layers][udp][udp_udp_srcport]}"}}
            mutate {remove_field => ["[packet][layers][udp]"]}
      }
      # Mbtcp Layer
	if [packet][layers][mbtcp]{
            mutate {rename => ["[packet][layers][mbtcp]", "mbtcp"]}
            mutate {remove_field => ["[packet][layers][mbtcp]"]}
      }
      # Modbus Layer
	if [packet][layers][modbus]{
            mutate {rename => ["[packet][layers][modbus]", "modbus"]}
            mutate {remove_field => ["[packet][layers][modbus]"]}
      }
      # Ip Adiciona cordenadas geograficas
      # if [packet][layers][ip]{
      #   geoip {
      #       source => "[packet][layers][ip][ip_ip_src]"
      #   }
      # }
      
	mutate {
	      remove_field => ["type","@version","host","port","message","tags","packet"]
	}
     
}


output {
    # Apresenta a saida no log de saida do logstash (Debug)
    stdout{
    
    }

    # Armazena os dados filtrados e tratados no ElasticSearch
    elasticsearch {
      user => elastic
      password => KhC3HlYbilCB1RX3TUyr
      hosts => [ "https://elasticsearch:9200" ]
      index => "net-01"
      ssl => true
      ssl_certificate_verification => false
      cacert => "/etc/logstash/certs/Logstash.crt.pem"
    }
}